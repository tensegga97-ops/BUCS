export interface ExportComplaint {
  id: string
  category: string
  title: string
  details: string
  intensity: string
  urgency: string
  student_name: string | null
  student_email: string | null
  student_id: string | null
  is_anonymous: boolean
  created_at: string
}

export function exportToCSV(complaints: ExportComplaint[], filename = "complaints") {
  const headers = [
    "Complaint ID",
    "Category",
    "Title",
    "Details",
    "Intensity Level",
    "Urgency Level",
    "Student Name",
    "Student Email",
    "Student ID",
    "Anonymous Submission",
    "Date Submitted",
    "Time Submitted",
  ]

  const csvRows = complaints.map((complaint) => {
    const submissionDate = new Date(complaint.created_at)

    // Helper function to properly escape CSV values
    const escapeCSVValue = (value: string | null | undefined): string => {
      if (!value) return ""
      // Convert to string and escape quotes by doubling them
      const stringValue = String(value).replace(/"/g, '""')
      // Always wrap in quotes to handle commas, newlines, and special characters
      return `"${stringValue}"`
    }

    return [
      escapeCSVValue(complaint.id),
      escapeCSVValue(complaint.category),
      escapeCSVValue(complaint.title),
      escapeCSVValue(complaint.details),
      escapeCSVValue(complaint.intensity),
      escapeCSVValue(complaint.urgency),
      escapeCSVValue(complaint.is_anonymous ? "N/A" : complaint.student_name || "N/A"),
      escapeCSVValue(complaint.is_anonymous ? "N/A" : complaint.student_email || "N/A"),
      escapeCSVValue(complaint.is_anonymous ? "N/A" : complaint.student_id || "N/A"),
      escapeCSVValue(complaint.is_anonymous ? "Yes" : "No"),
      escapeCSVValue(
        submissionDate.toLocaleDateString("en-US", {
          year: "numeric",
          month: "short",
          day: "numeric",
        }),
      ),
      escapeCSVValue(
        submissionDate.toLocaleTimeString("en-US", {
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        }),
      ),
    ]
  })

  const csvHeader = headers.map((header) => `"${header}"`).join(",")
  const csvBody = csvRows.map((row) => row.join(",")).join("\n")
  const csvContent = csvHeader + "\n" + csvBody

  // Add BOM for proper Excel UTF-8 handling
  const BOM = "\uFEFF"
  const finalContent = BOM + csvContent

  // Create and download the file
  const blob = new Blob([finalContent], { type: "text/csv;charset=utf-8;" })
  const link = document.createElement("a")

  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob)
    link.setAttribute("href", url)
    link.setAttribute("download", `${filename}_${new Date().toISOString().split("T")[0]}.csv`)
    link.style.visibility = "hidden"
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
}

export function exportCategoryToCSV(complaints: ExportComplaint[], category: string) {
  const filteredComplaints = complaints.filter((c) => c.category === category)
  exportToCSV(filteredComplaints, `complaints_${category.toLowerCase()}`)
}

export function generateSummaryReport(complaints: ExportComplaint[]): string {
  const total = complaints.length
  const anonymous = complaints.filter((c) => c.is_anonymous).length
  const categories = complaints.reduce(
    (acc, complaint) => {
      acc[complaint.category] = (acc[complaint.category] || 0) + 1
      return acc
    },
    {} as Record<string, number>,
  )

  const topCategory = Object.entries(categories).sort(([, a], [, b]) => b - a)[0]

  const report = `
BOWEN UNIVERSITY DSS COMPLAINT SUMMARY REPORT
Generated on: ${new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  })}

OVERVIEW:
- Total Complaints: ${total}
- Anonymous Submissions: ${anonymous} (${total > 0 ? Math.round((anonymous / total) * 100) : 0}%)
- Named Submissions: ${total - anonymous} (${total > 0 ? Math.round(((total - anonymous) / total) * 100) : 0}%)

CATEGORY BREAKDOWN:
${Object.entries(categories)
  .sort(([, a], [, b]) => b - a)
  .map(
    ([category, count]) => `- ${category}: ${count} complaints (${total > 0 ? Math.round((count / total) * 100) : 0}%)`,
  )
  .join("\n")}

TOP COMPLAINT CATEGORY:
${topCategory ? `${topCategory[0]} with ${topCategory[1]} complaints` : "No complaints yet"}

RECENT ACTIVITY:
Last 7 days: ${
    complaints.filter((c) => {
      const weekAgo = new Date()
      weekAgo.setDate(weekAgo.getDate() - 7)
      return new Date(c.created_at) > weekAgo
    }).length
  } complaints

This report was automatically generated by the DSS Complaint Management System.
  `.trim()

  return report
}
